#include <Arduino.h>
// Includes.
#include <LSM6DSLSensor.h>
#include "../lib/metro.h"

#define SerialPort Serial
#define I2C2_SCL    PB8 //old = PB10
#define I2C2_SDA    PB9 //old = PB11
#define INT1        PA4 //old = PD11

// Components.
TwoWire dev_i2c(I2C2_SDA, I2C2_SCL);
LSM6DSLSensor AccGyr(&dev_i2c, LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW);
Metro timer(50);
//Interrupts.
volatile int mems_event = 0;
char report[256];
void INT1Event_cb();

uint32_t temp_millis;
uint32_t lastMillis;

bool calibrated = false; 

float Oz = 0.0;
float Oy = 0.0;
float Ox = 0.0;
float xs;
float ys;
float zs;
float get_ang_pos(float wx,float wy,float wz,float Ox,float Oy,float Oz)
{

    uint32_t temp_millis = millis();
    double delta_time = static_cast<double>(temp_millis - lastMillis);
    lastMillis = temp_millis;
    
    //Ignore noise 
    // if ( wx <= 200.0 and wx >= - 200.0){wx = 0;}
    // if ( wy <= 200.0 and wy >= - 200.0){wy = 0;}
    // if ( wz <= 200.0 and wz >= - 200.0){wz = 0;}
    
    Ox = Ox + (wx/1000)*(delta_time/1000);
    Oy = Oy + (wy/1000)*(delta_time/1000);
    Oz = Oz + (wz/1000)*(delta_time/1000);
    
    SerialPort.print(" wz: ");
    SerialPort.print(wz/1000);
    SerialPort.print(" Oz:\t ");
    SerialPort.println(Oz);
    // SerialPort.print(" wy: ");
    // SerialPort.print(wy);
    // SerialPort.print(" Oy:\t ");
    // SerialPort.print(Oy);
    // SerialPort.print(" wz: ");
    // SerialPort.print(wz);
    // SerialPort.print(" Oz:\t ");
    // SerialPort.print(Oz);
    // SerialPort.println(" °/s : °");
    return Ox,Oy,Oz;
}

void setup() {

  // Led.
  pinMode(LED_BUILTIN, OUTPUT);

  // Initialize serial for output.
  SerialPort.begin(9600);
  SerialPort.println("Démarage");
  // Initialize I2C bus.
  dev_i2c.begin();

  //Interrupts.
  attachInterrupt(INT1, INT1Event_cb, RISING);

  // Initlialize Components.
  AccGyr.begin();
  AccGyr.Enable_X();
  AccGyr.Enable_G();

  SerialPort.println("Ok !");
  lastMillis = millis();
  Oz = 0.0;
  Oy = 0.0;
  Ox = 0.0;
  
  delay(1000);

}


void sendOrientation()

{

  uint8_t xl = 0;

  uint8_t xh = 0;

  uint8_t yl = 0;

  uint8_t yh = 0;

  uint8_t zl = 0;

  uint8_t zh = 0;



  AccGyr.Get_6D_Orientation_XL(&xl);

  AccGyr.Get_6D_Orientation_XH(&xh);

  AccGyr.Get_6D_Orientation_YL(&yl);

  AccGyr.Get_6D_Orientation_YH(&yh);

  AccGyr.Get_6D_Orientation_ZL(&zl);

  AccGyr.Get_6D_Orientation_ZH(&zh);



  if ( xl == 0 && yl == 0 && zl == 0 && xh == 0 && yh == 1 && zh == 0 )

  {

    sprintf( report, "\r\n  ________________  " \

                      "\r\n |                | " \

                      "\r\n |  *             | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |________________| \r\n" );

  }



  else if ( xl == 1 && yl == 0 && zl == 0 && xh == 0 && yh == 0 && zh == 0 )

  {

    sprintf( report, "\r\n  ________________  " \

                      "\r\n |                | " \

                      "\r\n |             *  | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |________________| \r\n" );

  }



  else if ( xl == 0 && yl == 0 && zl == 0 && xh == 1 && yh == 0 && zh == 0 )

  {

    sprintf( report, "\r\n  ________________  " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |  *             | " \

                      "\r\n |________________| \r\n" );

  }



  else if ( xl == 0 && yl == 1 && zl == 0 && xh == 0 && yh == 0 && zh == 0 )

  {

    sprintf( report, "\r\n  ________________  " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |                | " \

                      "\r\n |             *  | " \

                      "\r\n |________________| \r\n" );

  }



  else if ( xl == 0 && yl == 0 && zl == 0 && xh == 0 && yh == 0 && zh == 1 )

  {

    sprintf( report, "\r\n  __*_____________  " \

                      "\r\n |________________| \r\n" );

  }



  else if ( xl == 0 && yl == 0 && zl == 1 && xh == 0 && yh == 0 && zh == 0 )

  {

    sprintf( report, "\r\n  ________________  " \

                      "\r\n |________________| " \

                      "\r\n    *               \r\n" );

  }



  else

  {

    sprintf( report, "None of the 6D orientation axes is set in LSM6DSL - accelerometer.\r\n" );

  }



  SerialPort.print(report);

}

void loop() {
  int32_t acc[3];
  int32_t gyr[3];

  // if (mems_event) {
  //   mems_event = 0;
  //   LSM6DSL_Event_Status_t status;
  //   AccGyr.Get_Event_Status(&status);
  //   if (status.WakeUpStatus)
  //   {
  //     // Led blinking.
  //     digitalWrite(LED_BUILTIN, HIGH);
  //     delay(100);
  //     digitalWrite(LED_BUILTIN, LOW);
  //     //AccGyr.Get_X_Axes(acc);
  //     //AccGyr.Get_G_Axes(gyr);

  //     //SerialPort.printf("Acc : %d,%d,%d \n",acc[0],acc[1],acc[2]);
  //     //SerialPort.printf("gyr : x: %d, y: %d, z: %d \n",gyr[0],gyr[1],gyr[2]);
      
  //     // Output data.
  //     //SerialPort.println("Wake up Detected!");
  //   }
  // }
  AccGyr.Get_G_Axes(gyr);
  
  if(!calibrated)
  {
    SerialPort.println("CALIBRATING");
    xs = 0.0;
    ys = 0.0;
    zs = 0.0;
    int n = 10;
    for(int i=0 ; i<n ; i = i+1)
    {
      SerialPort.println(i);
      AccGyr.Get_G_Axes(gyr);
      xs += (float)gyr[0];
      ys += (float)gyr[1];
      zs += (float)gyr[2];
    SerialPort.print(" xs :"); 
    SerialPort.print(xs);
    SerialPort.print(" ys :"); 
    SerialPort.print(ys);
    SerialPort.print(" zs :"); 
    SerialPort.println(zs);
    }
    xs = (float)(xs/n);
    ys = (float)(ys/n);
    zs = (float)(zs/n);
    calibrated = true;
    SerialPort.print("\n CALIBRATED \n");
    SerialPort.print(" xs :"); 
    SerialPort.print(xs);
    SerialPort.print(" ys :"); 
    SerialPort.print(ys);
    SerialPort.print(" zs :"); 
    SerialPort.println(zs);
    delay(2000); 
  }
  
  if(timer.check())
  {
    AccGyr.Get_G_Axes(gyr);
    float wx = (float)gyr[0] - xs ;
    float wy = (float)gyr[1] - ys ;
    float wz = (float)gyr[2] - zs ;
    Ox,Oy,Oz = get_ang_pos(wx,wy,wz,Ox,Oy,Oz);
  }
  
} 

void INT1Event_cb()
{
  mems_event = 1;
}



